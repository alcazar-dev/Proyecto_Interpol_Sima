# -*- coding: utf-8 -*-
"""SCRIPT5_GRAFICACIONVIENTO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uOG_N4U57t-GzzY3RZPwARn6ZDZ71kfC

Interpolacion Viento

## Parte 0. Mount
"""


import pandas as pd

# Cargar los archivos desde las nuevas rutas
df_Completo_Imputado_Todascolumnas_SinEstandarizar_2022_2024 = pd.read_csv('D:/PROYECTO_SIMA/INFO/BASE_DATOS/df_interpolar.csv')
df_UBI = pd.read_csv('D:/PROYECTO_SIMA/INFO/BASE_DATOS/UBI.csv')

# Importar librerías necesarias
import geopandas as gpd
import contextily as ctx
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import griddata
from pyproj import Transformer

# Asegúrate de que las columnas 'date' y 'time' estén en el formato adecuado
# df_Completo_Imputado_Todascolumnas_SinEstandarizar_2022_2024['date'] = pd.to_datetime(df_Completo_Imputado_Todascolumnas_SinEstandarizar_2022_2024['date']).dt.date  # Solo la fecha
# df_Completo_Imputado_Todascolumnas_SinEstandarizar_2022_2024['time'] = pd.to_datetime(df_Completo_Imputado_Todascolumnas_SinEstandarizar_2022_2024['time']).dt.time  # Solo la hora

# Fecha y hora específicas para filtrar
fecha_especifica = '2024-07-30'
hora_especifica = '23:00:00'

# Filtrar los datos por fecha y hora separadas
df_filtrado = df_Completo_Imputado_Todascolumnas_SinEstandarizar_2022_2024[
    (df_Completo_Imputado_Todascolumnas_SinEstandarizar_2022_2024['date'].astype(str) == fecha_especifica) & 
    (df_Completo_Imputado_Todascolumnas_SinEstandarizar_2022_2024['time'].astype(str) == hora_especifica)
]

# Agrupar por Zona para calcular las concentraciones promedio de CO, WSR, WDR para esa fecha/hora
coords_zonas = df_filtrado.groupby('zona_encoded').agg({
    'latitud': 'mean',
    'longitud': 'mean',
    'PM10': 'mean',
    'WSR': 'mean',
    'WDR': 'mean'
}).reset_index()

# Crear un GeoDataFrame con las coordenadas de las zonas
gdf_zonas = gpd.GeoDataFrame(
    coords_zonas,
    geometry=gpd.points_from_xy(coords_zonas['longitud'], coords_zonas['latitud']),
    crs="EPSG:4326"  # Sistema de coordenadas WGS 84
)

# Transformar a un sistema de coordenadas proyectadas adecuado para añadir el mapa base
gdf_zonas = gdf_zonas.to_crs(epsg=3857)  # Proyección Web Mercator (compatible con contextily)

# Crear una malla de puntos para la interpolación
lon_grid, lat_grid = np.mgrid[
    coords_zonas['longitud'].min():coords_zonas['longitud'].max():100j,
    coords_zonas['latitud'].min():coords_zonas['latitud'].max():100j
]

# Realizar la interpolación
interpolated_CO = griddata(
    (coords_zonas['longitud'], coords_zonas['latitud']),
    coords_zonas['PM10'],
    (lon_grid, lat_grid),
    method='cubic'
)

# Ajustar la interpolación de CO según la velocidad del viento
interpolated_CO_adjusted = interpolated_CO * (1 + coords_zonas['WSR'].mean() / max(coords_zonas['WSR']))

# Crear un transformador para convertir de WGS84 (EPSG:4326) a Web Mercator (EPSG:3857)
transformer = Transformer.from_crs("epsg:4326", "epsg:3857", always_xy=True)

# Transformar las coordenadas de la malla
lon_grid_proj, lat_grid_proj = transformer.transform(lon_grid, lat_grid)

# Crear el mapa base
fig, ax = plt.subplots(figsize=(10, 8))

# Graficar las estaciones
gdf_zonas.plot(ax=ax, color='black', markersize=100, label='Estaciones')

# Añadir el mapa base de contexto con contextily
ctx.add_basemap(ax, crs=gdf_zonas.crs, source=ctx.providers.OpenStreetMap.Mapnik)

# Graficar el mapa de calor utilizando las coordenadas proyectadas
contour = ax.contourf(lon_grid_proj, lat_grid_proj, interpolated_CO_adjusted, cmap='coolwarm', alpha=0.6)

# Agregar una barra de colores
cbar = fig.colorbar(contour, ax=ax, label='Concentración PM10 ajustada')

# Añadir título y etiquetas
plt.title(f'Distribución de PM10 ajustada por viento en {fecha_especifica} {hora_especifica}', fontsize=15)
plt.legend()

# Mostrar el gráfico
plt.show()
